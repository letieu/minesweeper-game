{"version":3,"sources":["component/Square.js","component/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","this","cell","reveal","className","num","onClick","React","Component","createBoard","board","i","row","j","push","x","y","Math","floor","random","setMine","getNum","console","log","setNum","near","nx","ny","Game","state","lose","test","bind","item","revealNear","setState","checkWin","alert","length","map","key","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1caaedb4.chunk.js","sourcesContent":["import React from 'react';\n\nclass Square extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        if (!this.props.cell.reveal){\n            return (\n\n                <div className='square open' onClick={this.props.onClick}>+</div>\n            )\n        }\n        return (\n\n        <div className={`square x${this.props.cell.num}`} >{this.props.cell.num}</div>\n        )\n    }\n}\n\nexport default Square;","\nimport React from 'react';\nimport Square from './Square';\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            board :createBoard(),\n            lose:false\n        }\n        this.test = this.test.bind(this)\n    }\n    test(item){\n        if (item.num == 0){\n            this.revealNear(item)\n        }\n        item.reveal = true;\n        if (item.num == -1){\n            console.log('thua roi')\n            this.setState({lose:true})\n        }\n        \n        this.setState(state=>({\n            board : [...state.board]\n        }))\n        if (this.checkWin()){\n            alert('You win')\n        }\n\n    }\n    checkWin(){\n        for (let i=0;i < this.state.board.length;i++){\n            for (let j=0;j<this.state.board.length;j++){\n                if (this.state.board[i][j].reveal === false && this.state.board[i][j].num != -1 ){\n                    return false\n                }\n            }\n        }\n        return true;\n    }\n    revealNear(item){\n        if (item.num != 0){\n            item.reveal = true;\n            return\n        }\n        if (item.reveal){\n            return\n        }\n        item.reveal = true;\n        console.log(item)\n        let near = [-1,0,1]\n        for (let x of near){\n            for (let y of near){\n                let nx = item.x + x;\n                let ny = item.y + y;\n                if ( nx <0 || nx>9){\n                    continue;\n                }\n                if (ny <0 || ny>9){\n                    continue;\n                }\n                if (ny === y && nx === x){\n                    continue;\n                }\n                this.revealNear(this.state.board[nx][ny])\n            }\n           \n        }\n    }\n    render(){\n        if (this.state.lose){\n            for (let row of this.state.board){\n                for (let item of row){\n                    item.reveal = true\n                }\n            }\n\n        }\n        return (\n            <div className='game'>\n                {this.state.board.map(row=>row.map(\n                    item=>(\n                        <Square cell={item} onClick={()=>this.test(item)} key={ item.x.toString() + item.y.toString()}/>\n                    )\n                ))}\n\n            </div>\n        )\n    }\n}\n\n\nfunction createBoard(){\n    let board=[];\n    for (let i=0;i<10;i++){\n        let row = [];\n        for (let j=0;j<10;j++){\n            row.push({\n                reveal:false,\n                num:0,\n                x:i,\n                y:j\n            })\n        }\n        board.push(row)\n\n    }\n\n    setMine(board);\n\n    setNum(board);\n    return board;\n}\n\nfunction setMine(board){\n    for (let row of board){\n        for (let cell of row){\n            if (Math.floor(Math.random()*6)=== 0){\n                cell.num = -1 \n                // -1 is a  mine\n            }\n        }\n    }\n}\nfunction setNum(board){\n    for (let i=0;i<10 ;i++){\n        for (let j=0;j<10;j++){\n            if (board[i][j].num !== -1 ){\n                board[i][j].num = getNum(board,i,j)\n            }\n        }\n    }\n    console.log(board)\n\n}\nfunction getNum(board,x,y){\n    let num = 0;\n    let near = [-1,0,1];\n    for( let i of near){\n        for (let j of near){\n            let nx = x+i;\n            let ny = y+j;\n            if ( nx <0 || nx>9){\n                continue;\n            }\n            if (ny <0 || ny>9){\n                continue;\n            }\n            if (ny === y && nx === x){\n                continue;\n            }\n            if (board[nx][ny].num == -1){\n                num ++;\n            }\n        }\n    }\n    return num;\n}\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './component/Game';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}